# Example for some matrix led effects, especially a scrolling clock/mqtt text display
# set the text via:
#  mosquitto_pub -h mqtthost -t text/text -m "Hi there!"

substitutions:
  devicename: pixel_frame
  matrixwidth: "16" # in pix
  matrixheight: "16" # in pix
  scrollinterval: "0.2" # in seconds
  xscrollpadding: "4" # in pix
  text_1: "pixel_frame_text"
  animation_1: "matrix"
  animation_2: "mona"
  animation_3: "goomba"
  animation_4: "block"
  animation_5: "coin"
  animation_6: "mushroom"
  animation_7: "zelda_fire"
  animation_8: "zelda_skeleton"
  animation_9: "boss_key"
  animation_10: "frisk"
  animation_11: "blocks"
  animation_12: "coffee"
  animation_13: "face"
  animation_14: "fire"
  animation_15: "fish"
  animation_16: "octorok"
  animation_17: "water"
  animation_18: "zelda_walk"
  animation_19: "stripe"
  animation_20: "bryan"
  animation_21: "stripe_logo"
  animation_22: "stripe_block"
  animation_23: "fox"

esphome:
  name: $devicename
  platform: ESP8266
  board: d1_mini
  on_boot:
    priority: -10
    then: # stop the flickering
      - light.turn_on:
            id: mylight
            brightness: 100%
            effect: $animation_2

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_pw
  fast_connect: true

text_sensor:
  - platform: homeassistant
    name: "pixel frame input text"
    entity_id: input_text.pixel_frame_text
    id: panel_text
  - platform: homeassistant
    name: "pixel frame input color"
    entity_id: input_text.pixel_frame_color
    id: panel_color

logger:

debug:

# mqtt:
#   id: mqtt_client
#   broker: !secret mqtt_broker
#   username: !secret mqtt_un
#   password: !secret mqtt_pw

ota:

# Enable Home Assistant API
api:

font:
  - id: tinyfont
    file: "DejaVuSans-Bold.ttf"
    size: 10
    glyphs: "♡Ωäöüß!%()+,-_.:*=°?~#0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz"

time:
  - platform: sntp
    id: rtctime

light:
  - platform: neopixelbus
    variant: WS2812
    pin: 3
    num_leds: 256
    name: "$devicename Light"
    id: mylight
    default_transition_length: 0s
    color_correct: [50%, 50%, 50%]
    on_turn_on:
      - light.turn_on:
          id: mylight
          effect: $animation_7
    effects:
      - lambda:
          name: $text_1
          update_interval: 1s
          lambda: |-
            id(my_select).make_call().set_option("$text_1").perform();
      - lambda:
          name: $animation_1
          update_interval: 1s
          lambda: |-
            id(my_select).make_call().set_option("$animation_1").perform();
      - lambda:
          name: $animation_2
          update_interval: 1s
          lambda: |-
            id(my_select).make_call().set_option("$animation_2").perform();
      - lambda:
          name: $animation_3
          update_interval: 1s
          lambda: |-
            id(my_select).make_call().set_option("$animation_3").perform();
      - lambda:
          name: $animation_4
          update_interval: 1s
          lambda: |-
            id(my_select).make_call().set_option("$animation_4").perform();
      - lambda:
          name: $animation_5
          update_interval: 1s
          lambda: |-
            id(my_select).make_call().set_option("$animation_5").perform();
      - lambda:
          name: $animation_6
          update_interval: 1s
          lambda: |-
            id(my_select).make_call().set_option("$animation_6").perform();
      - lambda:
          name: $animation_7
          update_interval: 1s
          lambda: |-
            id(my_select).make_call().set_option("$animation_7").perform();
      - lambda:
          name: $animation_8
          update_interval: 1s
          lambda: |-
            id(my_select).make_call().set_option("$animation_8").perform();
      - lambda:
          name: $animation_9
          update_interval: 1s
          lambda: |-
            id(my_select).make_call().set_option("$animation_9").perform();
      - lambda:
          name: $animation_10
          update_interval: 1s
          lambda: |-
            id(my_select).make_call().set_option("$animation_10").perform();
      - lambda:
          name: $animation_11
          update_interval: 1s
          lambda: |-
            id(my_select).make_call().set_option("$animation_11").perform();
      - lambda:
          name: $animation_12
          update_interval: 1s
          lambda: |-
            id(my_select).make_call().set_option("$animation_12").perform();
      - lambda:
          name: $animation_13
          update_interval: 1s
          lambda: |-
            id(my_select).make_call().set_option("$animation_13").perform();
      - lambda:
          name: $animation_14
          update_interval: 1s
          lambda: |-
            id(my_select).make_call().set_option("$animation_14").perform();
      - lambda:
          name: $animation_15
          update_interval: 1s
          lambda: |-
            id(my_select).make_call().set_option("$animation_15").perform();
      - lambda:
          name: $animation_16
          update_interval: 1s
          lambda: |-
            id(my_select).make_call().set_option("$animation_16").perform();
      - lambda:
          name: $animation_17
          update_interval: 1s
          lambda: |-
            id(my_select).make_call().set_option("$animation_17").perform();
      - lambda:
          name: $animation_18
          update_interval: 1s
          lambda: |-
            id(my_select).make_call().set_option("$animation_18").perform();
      - lambda:
          name: $animation_19
          update_interval: 1s
          lambda: |-
            id(my_select).make_call().set_option("$animation_19").perform();
      - lambda:
          name: $animation_20
          update_interval: 1s
          lambda: |-
            id(my_select).make_call().set_option("$animation_20").perform();
      - lambda:
          name: $animation_21
          update_interval: 1s
          lambda: |-
            id(my_select).make_call().set_option("$animation_21").perform();
      - lambda:
          name: $animation_22
          update_interval: 1s
          lambda: |-
            id(my_select).make_call().set_option("$animation_22").perform();
      - lambda:
          name: $animation_23
          update_interval: 1s
          lambda: |-
            id(my_select).make_call().set_option("$animation_23").perform();

animation:
  - file: "$animation_1.gif"
    id: $animation_1
    type: RGB24
    resize: 16x16
  - file: "$animation_2.png"
    id: $animation_2
    type: RGB24
    resize: 16x16
  - file: "$animation_3.gif"
    id: $animation_3
    type: RGB24
    resize: 16x16
  - file: "$animation_4.gif"
    id: $animation_4
    type: RGB24
    resize: 16x16
  - file: "$animation_5.gif"
    id: $animation_5
    type: RGB24
    resize: 16x16
  - file: "$animation_6.png"
    id: $animation_6
    type: RGB24
    resize: 16x16
  - file: "$animation_7.gif"
    id: $animation_7
    type: RGB24
    resize: 16x16
  - file: "$animation_8.gif"
    id: $animation_8
    type: RGB24
    resize: 16x16
  - file: "$animation_9.png"
    id: $animation_9
    type: RGB24
    resize: 16x16
  - file: "$animation_10.png"
    id: $animation_10
    type: RGB24
    resize: 16x16
  - file: "$animation_11.gif"
    id: $animation_11
    type: RGB24
    resize: 16x16
  - file: "$animation_12.gif"
    id: $animation_12
    type: RGB24
    resize: 16x16
  - file: "$animation_13.gif"
    id: $animation_13
    type: RGB24
    resize: 16x16
  - file: "$animation_14.gif"
    id: $animation_14
    type: RGB24
    resize: 16x16
  - file: "$animation_15.gif"
    id: $animation_15
    type: RGB24
    resize: 16x16
  - file: "$animation_16.gif"
    id: $animation_16
    type: RGB24
    resize: 16x16
  - file: "$animation_17.gif"
    id: $animation_17
    type: RGB24
    resize: 16x16
  - file: "$animation_18.gif"
    id: $animation_18
    type: RGB24
    resize: 16x16
  - file: "$animation_19.gif"
    id: $animation_19
    type: RGB24
    resize: 16x16
  - file: "$animation_20.png"
    id: $animation_20
    type: RGB24
    resize: 16x16
  - file: "$animation_21.png"
    id: $animation_21
    type: RGB24
    resize: 16x16
  - file: "$animation_22.gif"
    id: $animation_22
    type: rgb24
    resize: 16x16
  - file: "$animation_23.gif"
    id: $animation_23
    type: rgb24
    resize: 16x16

image:
  - file: "$animation_21.png"
    id: stripe_image
    resize: 16x16

select:
    - name: Pixel Frame Select
      id: my_select
      platform: template
      optimistic: true
      options:
        - $text_1
        - $animation_1
        - $animation_2
        - $animation_3
        - $animation_4
        - $animation_5
        - $animation_6
        - $animation_7
        - $animation_8
        - $animation_9
        - $animation_10
        - $animation_11
        - $animation_12
        - $animation_13
        - $animation_14
        - $animation_15
        - $animation_16
        - $animation_17
        - $animation_18
        - $animation_19
        - $animation_20
        - $animation_21
        - $animation_22

display:
  - platform: addressable_light
    id: matrix_display
    addressable_light_id: mylight
    width: 16
    height: 16
    rotation: 0°
    pixel_mapper: |-
      if (y % 2 == 0) {
        return (y * 16) + (15 - x);
      }
      return (y * 16) + x;
    update_interval: 100ms
    lambda: |-
      static uint16_t run = 0;
      static Animation* animation;
      static uint16_t timer = 200;
      const char * text;
      static uint32_t color;
      static uint16_t xpos_timer = 0;
      static uint16_t xpos = 0;

      timer = 200;

      if (id(mylight).get_effect_name() == std::string("None")) {
      } else if (id(my_select).state == std::string("${text_1}")) {
        timer = 100;

        text = id(panel_text).state.c_str();
        const char * hexstring = id(panel_color).state.c_str();
        color = strtol(hexstring, NULL, 16);

        animation = NULL;
      } else if (id(my_select).state == std::string("${animation_1}")) {
        animation = $animation_1;
      } else if (id(my_select).state == std::string("${animation_2}")) {
        animation = $animation_2;
      } else if (id(my_select).state == std::string("${animation_3}")) {
        animation = $animation_3;
      } else if (id(my_select).state == std::string("${animation_4}")) {
        animation = $animation_4;
      } else if (id(my_select).state == std::string("${animation_5}")) {
        animation = $animation_5;
      } else if (id(my_select).state == std::string("${animation_6}")) {
        animation = $animation_6;
      } else if (id(my_select).state == std::string("${animation_7}")) {
        timer = 800;
        animation = $animation_7;
      } else if (id(my_select).state == std::string("${animation_8}")) {
        timer = 600;
        animation = $animation_8;
      } else if (id(my_select).state == std::string("${animation_9}")) {
        animation = $animation_9;
      } else if (id(my_select).state == std::string("${animation_10}")) {
        animation = $animation_10;
      } else if (id(my_select).state == std::string("${animation_11}")) {
        animation = $animation_11;
      } else if (id(my_select).state == std::string("${animation_12}")) {
        animation = $animation_12;
      } else if (id(my_select).state == std::string("${animation_13}")) {
        animation = $animation_13;
      } else if (id(my_select).state == std::string("${animation_14}")) {
        animation = $animation_14;
      } else if (id(my_select).state == std::string("${animation_15}")) {
        animation = $animation_15;
      } else if (id(my_select).state == std::string("${animation_16}")) {
        animation = $animation_16;
      } else if (id(my_select).state == std::string("${animation_17}")) {
        animation = $animation_17;
      } else if (id(my_select).state == std::string("${animation_18}")) {
        timer = 500;
        animation = $animation_18;
      } else if (id(my_select).state == std::string("${animation_19}")) {
        timer = 500;
        animation = $animation_19;
      } else if (id(my_select).state == std::string("${animation_20}")) {
        animation = $animation_20;
      } else if (id(my_select).state == std::string("${animation_20}")) {
        animation = $animation_20;
      } else if (id(my_select).state == std::string("${animation_21}")) {
        animation = $animation_21;
      }

      if (animation) {
        if (run % (timer/100) == 0)
          animation -> next_frame();
        it.image(0, 0, animation, COLOR_ON, COLOR_OFF);
      } else if (text) {
        if (run % (timer/100) == 0) {
          int x_start, y_start;
          int width, height;

          if (xpos_timer < 40) {
            xpos = 0;
          }
          it.image(-(xpos % (width + $xscrollpadding + 25 + 40)), 0, id(stripe_image), Color(color), Color(0xFFFFFF));
          it.get_text_bounds(0, 0, text, id(tinyfont),
              TextAlign::TOP_LEFT, &x_start, &y_start, &width, &height);

          it.print(-(xpos % (width + $xscrollpadding + 25 + 40)) + 19, 3,
            id(tinyfont), Color(color),
            TextAlign::TOP_LEFT, text);

          xpos_timer++;
          xpos++;
          if (xpos_timer > width + 25 + 40) {
            xpos_timer = 0;
            xpos = 0;
          }
        }
      }
      run++;
